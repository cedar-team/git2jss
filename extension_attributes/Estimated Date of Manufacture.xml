<?xml version="1.0" encoding="UTF-8"?><extensionAttribute>
<displayName>Estimated Date of Manufacture</displayName>
<description/>
<dataType>string</dataType>
<scriptContentsMac>#!/usr/bin/python&#13;
&#13;
# Copyright (c) 2016 University of Utah Student Computing Labs. ################&#13;
# All Rights Reserved.&#13;
#&#13;
# Permission to use, copy, modify, and distribute this software and&#13;
# its documentation for any purpose and without fee is hereby granted,&#13;
# provided that the above copyright notice appears in all copies and&#13;
# that both that copyright notice and this permission notice appear&#13;
# in supporting documentation, and that the name of The University&#13;
# of Utah not be used in advertising or publicity pertaining to&#13;
# distribution of the software without specific, written prior&#13;
# permission. This software is supplied as is without expressed or&#13;
# implied warranties of any kind.&#13;
################################################################################&#13;
&#13;
# estimated_date_of__manufacture.py ############################################&#13;
#&#13;
# A Python script to report estimated manufacture date.&#13;
#&#13;
#    1.0.0  2016.03.xx      Initial release tjm&#13;
#&#13;
#&#13;
################################################################################&#13;
&#13;
# Notes ########################################################################&#13;
#&#13;
# This script uses aggressively borrowed code from:&#13;
#&#13;
#   https://github.com/pudquick/pyMacWarranty/blob/master/getwarranty.py&#13;
#&#13;
#&#13;
################################################################################&#13;
&#13;
from __future__ import print_function&#13;
import subprocess&#13;
import re&#13;
import datetime&#13;
&#13;
def offline_estimated_manufacture(serial):&#13;
    est_date = u''&#13;
    if 10 &lt; len(serial) &lt; 13:&#13;
        if len(serial) == 11:&#13;
            # Old format&#13;
            year = serial[2].lower()&#13;
            est_year = 2000 + '   3456789012'.index(year)&#13;
            week = int(serial[3:5]) - 1&#13;
            year_time = datetime.date(year=est_year, month=1, day=1)&#13;
            if week:&#13;
                week_dif = datetime.timedelta(weeks=week)&#13;
                year_time += week_dif&#13;
            est_date = u'' + year_time.strftime('%Y-%m-%d')&#13;
        else:&#13;
            # New format&#13;
            alpha_year = 'cdfghjklmnpqrstvwxyz'&#13;
            year = serial[3].lower()&#13;
            est_year = 2010 + (alpha_year.index(year) / 2)&#13;
            # 1st or 2nd half of the year&#13;
            est_half = alpha_year.index(year) % 2&#13;
            week = serial[4].lower()&#13;
            alpha_week = ' 123456789cdfghjklmnpqrtvwxy'&#13;
            est_week = alpha_week.index(week) + (est_half * 26) - 1&#13;
            year_time = datetime.date(year=est_year, month=1, day=1)&#13;
            if est_week:&#13;
                week_dif = datetime.timedelta(weeks=est_week)&#13;
                year_time += week_dif&#13;
            est_date = u'' + year_time.strftime('%Y-%m-%d')&#13;
    return est_date&#13;
&#13;
&#13;
def main():&#13;
    serial_raw = subprocess.check_output(['system_profiler', 'SPHardwareDataType'])&#13;
    serial_raw = re.search('Serial.*: (.*)\n', serial_raw)&#13;
    serial_number = serial_raw.group(1)&#13;
&#13;
    est_date = offline_estimated_manufacture(serial_number)&#13;
&#13;
    print("&lt;result&gt;" + est_date + "&lt;/result&gt;")&#13;
&#13;
if __name__ == '__main__':&#13;
    main()&#13;
</scriptContentsMac>
</extensionAttribute>
